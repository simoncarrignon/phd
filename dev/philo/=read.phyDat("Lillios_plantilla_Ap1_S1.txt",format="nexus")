phyDat                package:phangorn                 R Documentation

_C_o_n_v_e_r_s_i_o_n _a_m_o_n_g _S_e_q_u_e_n_c_e _F_o_r_m_a_t_s

_D_e_s_c_r_i_p_t_i_o_n:

     These functions transform several DNA formats into the ‘phyDat’
     format.  ‘allSitePattern’ generates an alignment of all possible
     site patterns.

_U_s_a_g_e:

     phyDat(data, type = "DNA", levels = NULL, return.index=TRUE, ...) 
     read.phyDat(file, format="phylip", type="DNA", ...)
     write.phyDat(x, file, format="phylip",...)
     ## S3 method for class 'DNAbin'
     as.phyDat(x, ...)
     ## S3 method for class 'alignment'
     as.phyDat(x, type="DNA", ...)
     ## S3 method for class 'phyDat'
     as.character(x, allLevels = TRUE, ...)
     ## S3 method for class 'phyDat'
     as.data.frame(x, ...)
     ## S3 method for class 'phyDat'
     as.DNAbin(x, ...)
     ## S3 method for class 'phyDat'
     subset(x, subset, select, site.pattern = TRUE, ...)
     phyDat2alignment(x)
     allSitePattern(n, levels=c("a","c","g","t"), names=NULL)
     acgt2ry(obj)
     baseFreq(obj, freq=FALSE, drop.unused.levels=FALSE)
     
_A_r_g_u_m_e_n_t_s:

    data: An object containing sequences.

       x: An object containing sequences.

    type: Type of sequences ("DNA", "AA", "CODON" or "USER").

  levels: Level attributes.

return.index: If TRUE returns a index of the site patterns.

    file: A file name.

  format: File format of the sequence alignment (see details).

       n: Number of sequences.

   names: Names of sequences.

  subset: a subset of taxa.

  select: a subset of characters.

site.pattern: select site pattern or sites.

allLevels: return original data.

     obj: as object of class phyDat

    freq: logical, if 'TRUE', frequencies or counts are returned
          otherwise proportions

drop.unused.levels: logical, drop unused levels

     ...: further arguments passed to or from other methods.

_D_e_t_a_i_l_s:

     If ‘type’ "USER" a vector has to be give to ‘levels’. For example
     c("a", "c", "g", "t", "-") would create a data object that can be
     used in phylogenetic analysis with gaps as fifth state.  There is
     a more detailed example for specifying "USER" defined data formats
     in the vignette "phangorn-specials".

     ‘allSitePattern’ returns all possible site patterns and can be
     useful in simulation studies. For further details see the vignette
     phangorn-specials.

     ‘write.phyDat’ calls the function write.dna or write.nexus.data
     and ‘read.phyDat’ calls the function ‘read.dna’, ‘read.aa’ or
     ‘read.nexus.data’ see for more details over there.

     You may import data directly with ‘read.dna’ or ‘read.nexus.data’
     and convert the data to class phyDat.

     The generic function ‘c’ can be used to to combine sequences and
     ‘unique’ to get all unique sequences or unique haplotypes.

     ‘acgt2ry’ converts a ‘phyDat’ object of nucleotides into an binary
     ry-coded dataset.

_V_a_l_u_e:

     The functions return an object of class ‘phyDat’.

_A_u_t_h_o_r(_s):

     Klaus Schliep <email: klaus.schliep@gmail.com>

_S_e_e _A_l_s_o:

     ‘DNAbin’, ‘as.DNAbin’, ‘read.dna’, ‘read.aa’, ‘read.nexus.data’
     and the chapter 1 in the ‘vignette("phangorn-specials",
     package="phangorn")’ and the example of ‘pmlMix’ for the use of
     ‘allSitePattern’

_E_x_a_m_p_l_e_s:

     data(Laurasiatherian)
     class(Laurasiatherian)
     Laurasiatherian
     baseFreq(Laurasiatherian)
     subset(Laurasiatherian, subset=1:5)
     # transform into old ape format
     LauraChar <- as.character(Laurasiatherian)
     # and back 
     Laura <- phyDat(LauraChar, return.index=TRUE)
     all.equal(Laurasiatherian, Laura)
     allSitePattern(5)
     

phyDat                package:phangorn                 R Documentation

_C_o_n_v_e_r_s_i_o_n _a_m_o_n_g _S_e_q_u_e_n_c_e _F_o_r_m_a_t_s

_D_e_s_c_r_i_p_t_i_o_n:

     These functions transform several DNA formats into the ‘phyDat’
     format.  ‘allSitePattern’ generates an alignment of all possible
     site patterns.

_U_s_a_g_e:

     phyDat(data, type = "DNA", levels = NULL, return.index=TRUE, ...) 
     read.phyDat(file, format="phylip", type="DNA", ...)
     write.phyDat(x, file, format="phylip",...)
     ## S3 method for class 'DNAbin'
     as.phyDat(x, ...)
     ## S3 method for class 'alignment'
     as.phyDat(x, type="DNA", ...)
     ## S3 method for class 'phyDat'
     as.character(x, allLevels = TRUE, ...)
     ## S3 method for class 'phyDat'
     as.data.frame(x, ...)
     ## S3 method for class 'phyDat'
     as.DNAbin(x, ...)
     ## S3 method for class 'phyDat'
     subset(x, subset, select, site.pattern = TRUE, ...)
     phyDat2alignment(x)
     allSitePattern(n, levels=c("a","c","g","t"), names=NULL)
     acgt2ry(obj)
     baseFreq(obj, freq=FALSE, drop.unused.levels=FALSE)
     
_A_r_g_u_m_e_n_t_s:

    data: An object containing sequences.

       x: An object containing sequences.

    type: Type of sequences ("DNA", "AA", "CODON" or "USER").

  levels: Level attributes.

return.index: If TRUE returns a index of the site patterns.

    file: A file name.

  format: File format of the sequence alignment (see details).

       n: Number of sequences.

   names: Names of sequences.

  subset: a subset of taxa.

  select: a subset of characters.

site.pattern: select site pattern or sites.

allLevels: return original data.

     obj: as object of class phyDat

    freq: logical, if 'TRUE', frequencies or counts are returned
          otherwise proportions

drop.unused.levels: logical, drop unused levels

     ...: further arguments passed to or from other methods.

_D_e_t_a_i_l_s:

     If ‘type’ "USER" a vector has to be give to ‘levels’. For example
     c("a", "c", "g", "t", "-") would create a data object that can be
     used in phylogenetic analysis with gaps as fifth state.  There is
     a more detailed example for specifying "USER" defined data formats
     in the vignette "phangorn-specials".

     ‘allSitePattern’ returns all possible site patterns and can be
     useful in simulation studies. For further details see the vignette
     phangorn-specials.

     ‘write.phyDat’ calls the function write.dna or write.nexus.data
     and ‘read.phyDat’ calls the function ‘read.dna’, ‘read.aa’ or
     ‘read.nexus.data’ see for more details over there.

     You may import data directly with ‘read.dna’ or ‘read.nexus.data’
     and convert the data to class phyDat.

     The generic function ‘c’ can be used to to combine sequences and
     ‘unique’ to get all unique sequences or unique haplotypes.

     ‘acgt2ry’ converts a ‘phyDat’ object of nucleotides into an binary
     ry-coded dataset.

_V_a_l_u_e:

     The functions return an object of class ‘phyDat’.

_A_u_t_h_o_r(_s):

     Klaus Schliep <email: klaus.schliep@gmail.com>

_S_e_e _A_l_s_o:

     ‘DNAbin’, ‘as.DNAbin’, ‘read.dna’, ‘read.aa’, ‘read.nexus.data’
     and the chapter 1 in the ‘vignette("phangorn-specials",
     package="phangorn")’ and the example of ‘pmlMix’ for the use of
     ‘allSitePattern’

_E_x_a_m_p_l_e_s:

     data(Laurasiatherian)
     class(Laurasiatherian)
     Laurasiatherian
     baseFreq(Laurasiatherian)
     subset(Laurasiatherian, subset=1:5)
     # transform into old ape format
     LauraChar <- as.character(Laurasiatherian)
     # and back 
     Laura <- phyDat(LauraChar, return.index=TRUE)
     all.equal(Laurasiatherian, Laura)
     allSitePattern(5)
     

